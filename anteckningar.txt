************ Datatyper

C# är ett hårt typat programmeringsspråk

det betyger att vi bland annat måste bestämma vilken datatyp
som vår variabel ska innehålla.

lista på datatyper
https://www.w3schools.com/cs/cs_data_types.php

KOM IHÅG
Breakpoints är din bästa kompis! BFF

NULL
Om en variabel inte har fått något värde som kommer den att
vara NULL.

Null är samma sak om vakuum. 
"det som finns bortom universums slut"


*** Variabler
En variabel kan under hela tiden programmet körs få nya värden. 
Då försvinner det gamla

Enkla datatyper = en typ som bara kan innehålla ett värde av en och samma typ
string = strängar = en sammanhållen kedja av bokstäver
int = ingeter = heltal

När jag namnger en variabel spelar stora och små tecken roll
Det är case sensitive

om du vill byta namn. Använd Rename --> refactor

*** Arrayer
Det är en variabel som kan innhålla flera värden. MEN fortfarande av samma typ

******** VARIABLERS RÄCKVIDD
En variabel har en scope, eller räckvidd.

Det är samma sak om att den finns och lever i sitt kodblock { }

Det går att öka räckvidden för en variabel genom att 
flytta ut den från den lilla lådan till en större överliggande låda {}

*** Konvertering mellan datatyper
Jag kan byta en datatyp om jag vill för att bättre matcha en "mottagare"

*********** KODBLOCK
All kod i C# måste ligga inom  
{      }

Det kallar jag för ett kodblock

Ett kodblock kan liknas vid en låda som innehåller kod som hänger ihop med varandra

******* Bra kortkommandon
F5 = starta programmet
F10 = stega fram efter en breakpoint
F7 = hoppa in i code behind

**** Konstruktorn för objekt
Varje gång ett objekt skapas så körs en metod en och endast en gång
som heter konstruktor


********* STYRANDE SATSER
i ett program vill man många gånger styra koden i olika riktningar.

Om A är sant gör sak B, annars gör sak C

detta är en if-sats

if- else

Använd jämförelseoperatorer
== använder du för att jämföra om två saker är lika

https://www.w3schools.com/cs/cs_operators_comparison.php

Vi kan använda logiska operatorer
https://www.w3schools.com/cs/cs_operators_logical.php

**** METODER

Det använder vi bland annat för att undvika att koden upprepas
DRY don´t repeat yourself

Varje gång du kopierar och klistrar in kod, tänk metod

Metoder kan placeras på många olika ställen i vår kod.
Frågan vi ofta ställer oss blir. Var är det bäst?

Gäller metoden något som kan kallas affärslogik = de regler som gäller för
verksamheten som ska ha appen

De kan de metoderna läggas separat

Men, gäller metoden något som styr gränssnittet (Ux). Då kan
metoden istället behöva ligga i windowsklassen.

SOC separation of concern

I vårt exempel
- En metod för att hämta vilka tärningar användaren har sparat
- en metod för att kasta alla eller några tärningar
- en metod för att visa tärningarnas värde i gränssnittet.

En metod och en klass kan vara statisk. Se statiska klasser som resurser som
aldrig existerar i olika varianter

En metod MÅSTE returnera ett värde MEN värdet kan vara tomt = void